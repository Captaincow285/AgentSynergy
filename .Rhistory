mapSynergies <- list()
for (i in 1:length(mapComboWR)){
mapIterator <- mapComboWR[[i]]
synergy.df <- data.frame(matrix(ncol = length(agents), nrow=0))
for (j in 1:length(agents)){
synergyIterList <- list()
for (k in 1:length(agents)){
if ( !is.na(as.numeric(mapIterator[j, k])) ){
synergyIterList[k] <- 1
} else {
synergyIterList[k] <- 0
}
}
synergy.df[j,] <- synergyIterList
}
row.names(synergy.df) <- agents
colnames(synergy.df) <- agents
mapSynergies[i] <- synergy.df
}
View(synergy.df)
#Calculate the synergy
mapSynergies <- list()
for (i in 1:length(mapComboWR)){
mapIterator <- mapComboWR[[i]]
synergy.df <- data.frame(matrix(ncol = length(agents), nrow=0))
for (j in 1:length(agents)){
synergyIterList <- list()
for (k in 1:length(agents)){
if ( !is.na(as.numeric(mapIterator[j, k])) ){
synergyIterList[k] <- as.numeric(mapIterator[j, k])
} else {
synergyIterList[k] <- 0
}
}
synergy.df[j,] <- synergyIterList
}
row.names(synergy.df) <- agents
colnames(synergy.df) <- agents
mapSynergies[i] <- synergy.df
}
View(synergy.df)
mapWinrates[1, 2]
mapWinrates[1, 2][1]
mapWinrates[1, 2][[1]]
#Calculate the synergy
mapSynergies <- list()
for (i in 1:length(mapComboWR)){
mapIterator <- mapComboWR[[i]]
synergy.df <- data.frame(matrix(ncol = length(agents), nrow=0))
for (j in 1:length(agents)){
synergyIterList <- list()
for (k in 1:length(agents)){
if ( !is.na(as.numeric(mapIterator[j, k])) ){
if (is.na(mapWinrates[j, i][[1]])){
synergyIterList <- "No WR"
} else {
synergyIterList[k] <- as.numeric(mapIterator[j, k]) - mapWinrates[j, i][[1]]
}
} else {
synergyIterList[k] <- mapIterator[j, k]
}
}
synergy.df[j,] <- synergyIterList
}
row.names(synergy.df) <- agents
colnames(synergy.df) <- agents
mapSynergies[i] <- synergy.df
}
View(synergy.df)
#Calculate the synergy
mapSynergies <- list()
for (i in 1:length(mapComboWR)){
mapIterator <- mapComboWR[[i]]
synergy.df <- data.frame(matrix(ncol = length(agents), nrow=0))
for (j in 1:length(agents)){
synergyIterList <- list()
for (k in 1:length(agents)){
if ( !is.na(as.numeric(mapIterator[j, k])) ){
if (is.na(mapWinrates[j, i][[1]])){
synergyIterList <- "No WR"
} else {
synergyIterList[k] <- round( (as.numeric(mapIterator[j, k]) - mapWinrates[j, i][[1]]), digits = 5)
}
} else {
synergyIterList[k] <- mapIterator[j, k]
}
}
synergy.df[j,] <- synergyIterList
}
row.names(synergy.df) <- agents
colnames(synergy.df) <- agents
mapSynergies[i] <- synergy.df
}
View(synergy.df)
View(synergy.df)
View(synergy.df)
library(readr)
library(dplyr)
library(stringr)
library(foreach)
library(doParallel)
library(xlsx)
# n.cores <- parallel::detectCores() - 1
# my.cluster <- parallel::makeCluster(
#   n.cores,
#   type = "PSOCK"
# )
# doParallel::registerDoParallel(cl = my.cluster)
dataset.df <- read.csv("dataset.csv")
colnames(dataset.df) <- c("ID", "Map", "Team1Rounds", "Team2Rounds", "Date", "Team1Comp", "Team2Comp", "TotalRounds")
dataset.df$ID <- NULL
dataset.df$Date <- as.POSIXct(dataset.df$Date, format = "%m/%d/%Y", tz="UTC")
team1Win <- c()
team2Win <- c()
for(i in 1:nrow(dataset.df)) {
if (dataset.df$Team1Rounds[i] > dataset.df$Team2Rounds[i]) {
team1Win <- append(team1Win, 1)
team2Win <- append(team2Win, 0)
} else {
team1Win <- append(team1Win, 0)
team2Win <- append(team2Win, 1)
}
}
dataset.df$team1Win <- team1Win
dataset.df$team2Win <- team2Win
duplicate.df <- dataset.df
colnames(duplicate.df) <- c("Map", "Team2Rounds", "Team1Rounds", "Date", "Team2Comp", "Team1Comp", "TotalRounds", "team2Win", "team1Win")
dataset.df <- rbind(dataset.df, duplicate.df)
duplicate.df <- NULL
dataset.df$team2Win <- NULL
maps <- c("Ascent", "Bind", "Breeze", "Fracture", "Haven", "Icebox", "Lotus", "Pearl", "Split")
agents <- c("Astra", "Brimstone", "Harbor", "Omen", "Viper", "Chamber", "Cypher", "Killjoy", "Sage", "Breach",
"Fade", "Gekko", "KAY/O", "Skye", "Sova", "Jett", "Neon", "Phoenix", "Raze", "Reyna", "Yoru")
#Encode the agents
for (i in 1:length(agents)){
print(agents[i])
agentEncoding <- c()
for (j in 1:nrow(dataset.df)){
if ((agents[i] %in% str_extract(dataset.df$Team1Comp[j], agents[i])) &
!(agents[i] %in% str_extract(dataset.df$Team2Comp[j], agents[i]))){
agentEncoding[j] <- 1 #dataset.df$Team1Rounds[j] - dataset.df$Team2Rounds[j]
} else {
agentEncoding[j] <- 0
}
}
dataset.df[agents[i]] <- agentEncoding
}
# names(dataset.df)[names(dataset.df) == "KAY/O"] <- "KAYO"
# agents <- replace(agents, agents == "Kay/O", "KAYO")
# removeRows <- c()
# for (i in 1:nrow(dataset.df)){
#   if (sum(dataset.df[i,][ncol(dataset.df)-length(agents), ncol(dataset.df)]) == 0){
#     removeRows <- append(removeRows, i)
#   }
# }
# dataset.df <- dataset.df[-removeRows,]
dataset.df <- dataset.df %>%
filter(dataset.df$Date > "2023-01-01")
mapDatasets <- list()
for (i in 1:length(maps)){
mapDatasets[[i]] <- dataset.df[dataset.df$Map == maps[i],]
}
#Generate the Combo WRs
mapComboWR <- list()
mapWinrates <- data.frame(matrix(ncol=0, nrow=length(agents)))
for (i in 1: length(mapDatasets)){
comboWR.df <- data.frame(matrix(ncol=length(agents), nrow=0))
colnames(comboWR.df) <- agents
map.df <- mapDatasets[[i]]
soloWinrates <- list()
for (j in 1:length(agents)){
comboWR <- list()
soloWins <- sum(map.df$Team1Rounds[map.df[agents[j]]==1])
soloRounds <- sum(map.df$TotalRounds[map.df[agents[j]]==1])
soloWR <- soloWins / soloRounds
soloWinrates[j] <- round(soloWR, digits = 6)
for (k in 1:length(agents)){
wins <- sum(map.df$Team1Rounds[ map.df[agents[j]]==1  & map.df[agents[k]]==1 ])
rounds <- sum(map.df$TotalRounds[ map.df[agents[j]]==1  & map.df[agents[k]]==1 ])
if (rounds >= 300){
comboWR[k] <- round(as.numeric(wins / rounds), digits = 6)
} else {
comboWR[k] <- "ISS"
}
}
comboWR[is.na(comboWR)] <- "No Data"
comboWR.df[j,] <- comboWR
}
mapWinrates[[i]] <- soloWinrates
row.names(comboWR.df) <- agents
mapComboWR[[i]] <- comboWR.df
}
colnames(mapWinrates) <- maps
row.names(mapWinrates) <- agents
#Calculate the synergy
mapSynergies <- list()
for (i in 1:length(mapComboWR)){
mapIterator <- mapComboWR[[i]]
synergy.df <- data.frame(matrix(ncol = length(agents), nrow=0))
for (j in 1:length(agents)){
synergyIterList <- list()
for (k in 1:length(agents)){
if ( !is.na(as.numeric(mapIterator[j, k])) ){
if (is.na(mapWinrates[j, i][[1]])){
synergyIterList <- "No WR"
} else {
synergyIterList[k] <- round( (as.numeric(mapIterator[j, k]) - mapWinrates[j, i][[1]]), digits = 5)
}
} else {
synergyIterList[k] <- mapIterator[j, k]
}
}
synergy.df[j,] <- synergyIterList
}
row.names(synergy.df) <- agents
colnames(synergy.df) <- agents
mapSynergies[i] <- synergy.df
}
View(mapSynergies)
library(readr)
library(dplyr)
library(stringr)
library(foreach)
library(doParallel)
library(xlsx)
# n.cores <- parallel::detectCores() - 1
# my.cluster <- parallel::makeCluster(
#   n.cores,
#   type = "PSOCK"
# )
# doParallel::registerDoParallel(cl = my.cluster)
dataset.df <- read.csv("dataset.csv")
colnames(dataset.df) <- c("ID", "Map", "Team1Rounds", "Team2Rounds", "Date", "Team1Comp", "Team2Comp", "TotalRounds")
dataset.df$ID <- NULL
dataset.df$Date <- as.POSIXct(dataset.df$Date, format = "%m/%d/%Y", tz="UTC")
team1Win <- c()
team2Win <- c()
for(i in 1:nrow(dataset.df)) {
if (dataset.df$Team1Rounds[i] > dataset.df$Team2Rounds[i]) {
team1Win <- append(team1Win, 1)
team2Win <- append(team2Win, 0)
} else {
team1Win <- append(team1Win, 0)
team2Win <- append(team2Win, 1)
}
}
library(readr)
library(dplyr)
library(stringr)
library(foreach)
library(doParallel)
library(xlsx)
# n.cores <- parallel::detectCores() - 1
# my.cluster <- parallel::makeCluster(
#   n.cores,
#   type = "PSOCK"
# )
# doParallel::registerDoParallel(cl = my.cluster)
dataset.df <- read.csv("dataset.csv")
colnames(dataset.df) <- c("ID", "Map", "Team1Rounds", "Team2Rounds", "Date", "Team1Comp", "Team2Comp", "TotalRounds")
dataset.df$ID <- NULL
dataset.df$Date <- as.POSIXct(dataset.df$Date, format = "%m/%d/%Y", tz="UTC")
team1Win <- c()
team2Win <- c()
for(i in 1:nrow(dataset.df)) {
if (dataset.df$Team1Rounds[i] > dataset.df$Team2Rounds[i]) {
team1Win <- append(team1Win, 1)
team2Win <- append(team2Win, 0)
} else {
team1Win <- append(team1Win, 0)
team2Win <- append(team2Win, 1)
}
}
dataset.df$team1Win <- team1Win
dataset.df$team2Win <- team2Win
duplicate.df <- dataset.df
colnames(duplicate.df) <- c("Map", "Team2Rounds", "Team1Rounds", "Date", "Team2Comp", "Team1Comp", "TotalRounds", "team2Win", "team1Win")
dataset.df <- rbind(dataset.df, duplicate.df)
duplicate.df <- NULL
dataset.df$team2Win <- NULL
maps <- c("Ascent", "Bind", "Breeze", "Fracture", "Haven", "Icebox", "Lotus", "Pearl", "Split")
agents <- c("Astra", "Brimstone", "Harbor", "Omen", "Viper", "Chamber", "Cypher", "Killjoy", "Sage", "Breach",
"Fade", "Gekko", "KAY/O", "Skye", "Sova", "Jett", "Neon", "Phoenix", "Raze", "Reyna", "Yoru")
#Encode the agents
for (i in 1:length(agents)){
print(agents[i])
agentEncoding <- c()
for (j in 1:nrow(dataset.df)){
if ((agents[i] %in% str_extract(dataset.df$Team1Comp[j], agents[i])) &
!(agents[i] %in% str_extract(dataset.df$Team2Comp[j], agents[i]))){
agentEncoding[j] <- 1 #dataset.df$Team1Rounds[j] - dataset.df$Team2Rounds[j]
} else {
agentEncoding[j] <- 0
}
}
dataset.df[agents[i]] <- agentEncoding
}
# names(dataset.df)[names(dataset.df) == "KAY/O"] <- "KAYO"
# agents <- replace(agents, agents == "Kay/O", "KAYO")
# removeRows <- c()
# for (i in 1:nrow(dataset.df)){
#   if (sum(dataset.df[i,][ncol(dataset.df)-length(agents), ncol(dataset.df)]) == 0){
#     removeRows <- append(removeRows, i)
#   }
# }
# dataset.df <- dataset.df[-removeRows,]
dataset.df <- dataset.df %>%
filter(dataset.df$Date > "2023-01-01")
mapDatasets <- list()
for (i in 1:length(maps)){
mapDatasets[[i]] <- dataset.df[dataset.df$Map == maps[i],]
}
#Generate the Combo WRs
mapComboWR <- list()
mapWinrates <- data.frame(matrix(ncol=0, nrow=length(agents)))
for (i in 1: length(mapDatasets)){
comboWR.df <- data.frame(matrix(ncol=length(agents), nrow=0))
colnames(comboWR.df) <- agents
map.df <- mapDatasets[[i]]
soloWinrates <- list()
for (j in 1:length(agents)){
comboWR <- list()
soloWins <- sum(map.df$Team1Rounds[map.df[agents[j]]==1])
soloRounds <- sum(map.df$TotalRounds[map.df[agents[j]]==1])
soloWR <- soloWins / soloRounds
soloWinrates[j] <- round(soloWR, digits = 6)
for (k in 1:length(agents)){
wins <- sum(map.df$Team1Rounds[ map.df[agents[j]]==1  & map.df[agents[k]]==1 ])
rounds <- sum(map.df$TotalRounds[ map.df[agents[j]]==1  & map.df[agents[k]]==1 ])
if (rounds >= 300){
comboWR[k] <- round(as.numeric(wins / rounds), digits = 6)
} else {
comboWR[k] <- "ISS"
}
}
comboWR[is.na(comboWR)] <- "No Data"
comboWR.df[j,] <- comboWR
}
mapWinrates[[i]] <- soloWinrates
row.names(comboWR.df) <- agents
mapComboWR[[i]] <- comboWR.df
}
colnames(mapWinrates) <- maps
row.names(mapWinrates) <- agents
#Calculate the synergy
mapSynergies <- list()
for (i in 1:length(mapComboWR)){
mapIterator <- mapComboWR[[i]]
synergy.df <- data.frame(matrix(ncol = length(agents), nrow=0))
for (j in 1:length(agents)){
synergyIterList <- list()
for (k in 1:length(agents)){
if ( !is.na(as.numeric(mapIterator[j, k])) ){
if (is.na(mapWinrates[j, i][[1]])){
synergyIterList <- "No WR"
} else {
synergyIterList[k] <- round( (as.numeric(mapIterator[j, k]) - mapWinrates[j, i][[1]]), digits = 5)
}
} else {
synergyIterList[k] <- mapIterator[j, k]
}
}
synergy.df[j,] <- synergyIterList
}
row.names(synergy.df) <- agents
colnames(synergy.df) <- agents
mapSynergies[i] <- synergy.df
}
path <- "C:/Users/Capta/Documents/College/Valorant/Analysis/AgentSynergyLinearModel/"
write.xlsx2(mapWinrates, paste0(path, "SynergyReport.xlsx"), row.names = TRUE, sheetName = "Overall WR")
for (i in 1:length(mapComboWR)){
write.xlsx2(mapComboWR[[i]], paste0(path, "SynergyReport.xlsx"), row.names = TRUE, sheetName = paste(maps[i], "WRs"), append = TRUE)
write.xlsx2(mapSynergies[[i]], paste0(path, "SynergyReport.xlsx"), row.names = TRUE, sheetName = paste(maps[i], "Synergies"), append = TRUE)
}
# synergies <- list()
# for (i in 1:length(maps)){
#   synergies[[i]] <- dataset.df
# }
View(mapSynergies)
View(synergy.df)
library(readr)
library(dplyr)
library(stringr)
library(foreach)
library(doParallel)
library(xlsx)
# n.cores <- parallel::detectCores() - 1
# my.cluster <- parallel::makeCluster(
#   n.cores,
#   type = "PSOCK"
# )
# doParallel::registerDoParallel(cl = my.cluster)
dataset.df <- read.csv("dataset.csv")
colnames(dataset.df) <- c("ID", "Map", "Team1Rounds", "Team2Rounds", "Date", "Team1Comp", "Team2Comp", "TotalRounds")
dataset.df$ID <- NULL
dataset.df$Date <- as.POSIXct(dataset.df$Date, format = "%m/%d/%Y", tz="UTC")
team1Win <- c()
team2Win <- c()
for(i in 1:nrow(dataset.df)) {
if (dataset.df$Team1Rounds[i] > dataset.df$Team2Rounds[i]) {
team1Win <- append(team1Win, 1)
team2Win <- append(team2Win, 0)
} else {
team1Win <- append(team1Win, 0)
team2Win <- append(team2Win, 1)
}
}
dataset.df$team1Win <- team1Win
dataset.df$team2Win <- team2Win
duplicate.df <- dataset.df
colnames(duplicate.df) <- c("Map", "Team2Rounds", "Team1Rounds", "Date", "Team2Comp", "Team1Comp", "TotalRounds", "team2Win", "team1Win")
dataset.df <- rbind(dataset.df, duplicate.df)
duplicate.df <- NULL
dataset.df$team2Win <- NULL
maps <- c("Ascent", "Bind", "Breeze", "Fracture", "Haven", "Icebox", "Lotus", "Pearl", "Split")
agents <- c("Astra", "Brimstone", "Harbor", "Omen", "Viper", "Chamber", "Cypher", "Killjoy", "Sage", "Breach",
"Fade", "Gekko", "KAY/O", "Skye", "Sova", "Jett", "Neon", "Phoenix", "Raze", "Reyna", "Yoru")
#Encode the agents
for (i in 1:length(agents)){
print(agents[i])
agentEncoding <- c()
for (j in 1:nrow(dataset.df)){
if ((agents[i] %in% str_extract(dataset.df$Team1Comp[j], agents[i])) &
!(agents[i] %in% str_extract(dataset.df$Team2Comp[j], agents[i]))){
agentEncoding[j] <- 1 #dataset.df$Team1Rounds[j] - dataset.df$Team2Rounds[j]
} else {
agentEncoding[j] <- 0
}
}
dataset.df[agents[i]] <- agentEncoding
}
# names(dataset.df)[names(dataset.df) == "KAY/O"] <- "KAYO"
# agents <- replace(agents, agents == "Kay/O", "KAYO")
# removeRows <- c()
# for (i in 1:nrow(dataset.df)){
#   if (sum(dataset.df[i,][ncol(dataset.df)-length(agents), ncol(dataset.df)]) == 0){
#     removeRows <- append(removeRows, i)
#   }
# }
# dataset.df <- dataset.df[-removeRows,]
dataset.df <- dataset.df %>%
filter(dataset.df$Date > "2023-01-01")
mapDatasets <- list()
for (i in 1:length(maps)){
mapDatasets[[i]] <- dataset.df[dataset.df$Map == maps[i],]
}
#Generate the Combo WRs
mapComboWR <- list()
mapWinrates <- data.frame(matrix(ncol=0, nrow=length(agents)))
for (i in 1: length(mapDatasets)){
comboWR.df <- data.frame(matrix(ncol=length(agents), nrow=0))
colnames(comboWR.df) <- agents
map.df <- mapDatasets[[i]]
soloWinrates <- list()
for (j in 1:length(agents)){
comboWR <- list()
soloWins <- sum(map.df$Team1Rounds[map.df[agents[j]]==1])
soloRounds <- sum(map.df$TotalRounds[map.df[agents[j]]==1])
soloWR <- soloWins / soloRounds
soloWinrates[j] <- round(soloWR, digits = 6)
for (k in 1:length(agents)){
wins <- sum(map.df$Team1Rounds[ map.df[agents[j]]==1  & map.df[agents[k]]==1 ])
rounds <- sum(map.df$TotalRounds[ map.df[agents[j]]==1  & map.df[agents[k]]==1 ])
if (rounds >= 300){
comboWR[k] <- round(as.numeric(wins / rounds), digits = 6)
} else {
comboWR[k] <- "ISS"
}
}
comboWR[is.na(comboWR)] <- "No Data"
comboWR.df[j,] <- comboWR
}
mapWinrates[[i]] <- soloWinrates
row.names(comboWR.df) <- agents
mapComboWR[[i]] <- comboWR.df
}
colnames(mapWinrates) <- maps
row.names(mapWinrates) <- agents
#Calculate the synergy
mapSynergies <- list()
for (i in 1:length(mapComboWR)){
mapIterator <- mapComboWR[[i]]
synergy.df <- data.frame(matrix(ncol = length(agents), nrow=0))
for (j in 1:length(agents)){
synergyIterList <- list()
for (k in 1:length(agents)){
if ( !is.na(as.numeric(mapIterator[j, k])) ){
if (is.na(mapWinrates[j, i][[1]])){
synergyIterList <- "No WR"
} else {
synergyIterList[k] <- round( (as.numeric(mapIterator[j, k]) - mapWinrates[j, i][[1]]), digits = 5)
}
} else {
synergyIterList[k] <- mapIterator[j, k]
}
}
synergy.df[j,] <- synergyIterList
}
row.names(synergy.df) <- agents
colnames(synergy.df) <- agents
mapSynergies[[i]] <- synergy.df
}
path <- "C:/Users/Capta/Documents/College/Valorant/Analysis/AgentSynergyLinearModel/"
write.xlsx2(mapWinrates, paste0(path, "SynergyReport.xlsx"), row.names = TRUE, sheetName = "Overall WR")
for (i in 1:length(mapComboWR)){
write.xlsx2(mapComboWR[[i]], paste0(path, "SynergyReport.xlsx"), row.names = TRUE, sheetName = paste(maps[i], "WRs"), append = TRUE)
write.xlsx2(mapSynergies[[i]], paste0(path, "SynergyReport.xlsx"), row.names = TRUE, sheetName = paste(maps[i], "Synergies"), append = TRUE)
}
# synergies <- list()
# for (i in 1:length(maps)){
#   synergies[[i]] <- dataset.df
# }
